{func dx_get_theme_data ($category $theme)
	{find 
		$syscfg
      themedata
		$category
		$theme
	}
}

{func dx_is_subdir_loaded ($parentdir $subdirpath)
	{set $idx -1}
	{find_elem {$parentdir get_array subdirs} $subdirpath $idx}
	{!= $idx -1}
}

{func dx_remove_subdir_path ($dir $path)
	{find_elem {$dir get_array subdirs} $idx}
	{$dir remove (subdirs $idx)}
}

; The game really doesn't like it if we force it to use our own trackwidgets so we're just
; going to back up the ones that are already there and then hijack them
{func dx_backup_trackwidgets ($trackdir)
	{set_this $trackdir}
	{unless {$trackdir has (widgets_backed_up)}
		{foreach $set ((NORMALGEM_SET) (HOPOGEM_SET))
			{foreach $widget $set
				{set $backup_widget {symbol {sprint {$widget name} "_bak"}}}
				{new TrackWidget $backup_widget}
				{$backup_widget copy $widget kCopyShallow}
			}
		}
		{$trackdir set widgets_backed_up TRUE}
	}
}

{func dx_restore_trackwidgets ($trackdir)
	{set_this $trackdir}
	{if {$trackdir has (widgets_backed_up)}
		{foreach $set ((NORMALGEM_SET) (HOPOGEM_SET))
			{foreach $widget $set
				{set $backup_widget {symbol {sprint {$widget name} "_bak"}}}
				{$widget copy $backup_widget kCopyShallow}
			}
		}
	}
}

{func dx_install_gem_theme ($trackdir)
	{set_this $trackdir}
	{dx_backup_trackwidgets $trackdir}
	{set $iter 0}
	{foreach $themewid {elem {find {dx_get_theme_data gems $dx_current_gem_model_theme} guitar strum} 1}
		{dx_log_writer insane {sprint "Altering " {elem (NORMALGEM_SET) $iter}}}
		{{elem (NORMALGEM_SET) $iter} copy $themewid kCopyShallow}
      {foreach $mesh {$themewid get_array meshes}
         {dx_log_writer insane {sprint "Mesh: " $mesh}}
         {gem_pieces.grp add_object $mesh}
      }
      {{elem (NORMALGEM_SET) $iter} set text_color {pack_color 0 0 0}} ; just to trigger a sync
		{++ $iter}
	}
	{set $iter 0}
	{foreach $themewid {elem {find {dx_get_theme_data gems $dx_current_gem_model_theme} guitar hopo} 1}
		{dx_log_writer insane {sprint "Altering " {elem (HOPOGEM_SET) $iter}}}
		{{elem (HOPOGEM_SET) $iter} copy $themewid kCopyShallow}
      {foreach $mesh {$themewid get_array meshes}
         {dx_log_writer insane {sprint "Mesh: " $mesh}}
         {gem_pieces.grp add_object $mesh}
      }
      {{elem (HOPOGEM_SET) $iter} set text_color {pack_color 0 0 0}} ; just to trigger a sync
		{++ $iter}
	}
}

{func dx_uninstall_gem_theme ($trackdir)
	{dx_restore_trackwidgets $trackdir}
}

{func dx_update_model_themes ($trackpanel)
   {set $iwanttologstuff TRUE}
	{set $gem_model_path {sprint "dx/models/gems/" $dx_current_gem_model_theme "/theme.milo"}}
   {dx_log_writer insane {sprint "Trying to load gem theme milo: " $gem_model_path}}
	{unless {dx_is_subdir_loaded {$trackpanel loaded_dir} $gem_model_path}
		{{$trackpanel loaded_dir} insert (subdirs 0) $gem_model_path}
	}
	{$trackpanel iterate GemTrackDir $dir
		{if {|| {! {$dir has (loaded_model_theme)}} {!= {$dir get loaded_model_theme} $gem_model_path}}
			{if {$dir has (loaded_model_theme)}
				{dx_uninstall_gem_theme $dir}
				{dx_remove_subdir_path $dir $gem_model_path}
			}
			{$dir insert (subdirs 0) $gem_model_path}
			{$dir set loaded_model_theme $gem_model_path}
			{dx_install_gem_theme $dir}
		}
	}
}